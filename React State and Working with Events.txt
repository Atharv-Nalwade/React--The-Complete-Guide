In react we handle events with props which startt with "On" they require a value which is a function which is called when the event happens
Eg:   <button onClick={()=>{console.log("athu")}}>Change</button>
       OR
       const clickhandler = () =>{  log("ok" }
       <button onClick={clickHandler}>Change</button>
       
 
 Good practice is to end the func. name with handler for event func.
 
 Normally when we trya change a value in return of a component using a j svariable that doesnt work as the file or component is rendered only once and thus the vaibale value will naver be shoin in the broweser
 
 Hooks start with use keyword  they cannot be used inside nested function and can be used only inside functions
 
 change in a var will lead to calling of rendering component again 
 
 useState(default_variable_od_value)
 It returns an array  
 first ele is the value itself and second si the updating function 
 
 const [title,setTitle] = useState(props.title) intially tilte is equl to props.title or current state value  
 and setTitle is the function used to set the new value 
 It returns a pair of values: the current state and a function that updates it
 
 the useState(props.tile) is the default statee or the one send by props 
 
 the useState is component based even if they are many same components then aslo it affects only its own 
 
 Also later times when the component is reinitialized that timw the default val. is not considered only the current is considered the past value is tken care of 
 
 <input type="number" min='0.01' step='0.01' />
 
 
 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
                                                                   Listening to User iNput
                                                                   
 The onchange event occurs when the value of an element has been changed.

For radiobuttons and checkboxes, the onchange event occurs when the checked state has been changed.

Tip: This event is similar to the oninput event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on <select> elements. 

    const titleChangeHandler=() =>{
    console.log("title changed")
   }
 <input type="text" onChange={titleChangeHandler} />   to  call the ufnction on change 
 
 in js doc.getelebyId("someid").addeventListner("click",(event) => {---});  event is the daefault object that we get which describes the event that occured 
 Sometimes we may want to know more information about the event, such as what element was clicked. In this situation, we need to pass in an event parameter to our function.
 Here the event parameter is a variable named e but it can be easily called anything else such as "event". This parameter is an object which contains various information about the event such as the target id.
 Here e is the obj ehich has info about the the evnt 
   there input has value which holds value of the input 
   therefore e.target.value gives us the value 
    
                  
   -------------------------------------------------------------------
  const [enteredTitle,setEnteredTitle]=useState("")
    const [enteredAmount,setEnteredAmount]=useState("$0.0")
    const [enteredDate,setEnteredDate]=useState("") 
    
    Alternative to this could be one state
      const [userInput,setUserInput] = useState({
           eneteredTitle="",
           enteredAmount="",
           eneterdDate=""
           });
           
           so setUserInput({
           ...userInput
           enteredTitle:event.target.value    here we call the original userInput and override it with inputted entered Titlr 
           }); 
           
           or better to  above coul be 
           
           setUserInputz( (prevState) = >
           {  ..prevStae,
            enteredTitle:event.target.value
            });
            
            the para to function ensures that you have the latest stae passed to the function thus no problem in wrong statee reffering as we know that react schedules             updates so it might happen that we might refer to wrong state 
            
            
            When form is submitted the default event that happens is onSubmit  and by default it reloads the webpage 
            to Sttop that we can call event.preventDeafult(); whic does not send the request to the server an dthus no reload 
            and we can use object to store all data and when submit log it to see it 
            
              Similar for enteredDAte and enteredAmoutn 
                    
           https://www.youtube.com/watch?v=-3lL8oyev9w  fro multiple states   good  explanation    
           
           To way Data Binding is when we change we also update 
   
            ----------------------------------------------------------------------------------------------------------------------------------------------------
                                                           Child to Parent Communication 
                                                           
   When we define a handler to something that time we do not manually call the handler fucntion ourselves it is by default called when we are having a ptr to function and we are calling it in another componet that time we have to use paranthesis to maually call it 
   but we hvae to call it using the variabel in ehich we are storing it 
   
----   Sending function in parent to child using prop and in child using the var ofr which function is defined in parent and calling it using () then to send date we          give some argument to the function in child and that is passed to parent as a argument to function which is stored or declared inside the  parent function


                                                                          Parent
         const SaveExpenseDataHandler=(enteredExpenseData)=>{
      const expenseData={
        ...enteredExpenseData
      }
      console.log(expenseData)
     }


    return (
        <div className='new-expense'>
       <ExpenseForm  onSaveExpenseData={SaveExpenseDataHandler}/>   /  
       </div>
    );
             
                                                                    CHILD
        props.onSaveExpenseData(expenseDate);    
        
        ---------
               
               To send data between two siblings we cannot pass it directly what we can do is to lift the state up from one child component toclosest parent and then passing the sate to sibling i.e  child of parent via props 
               i.e parnet has two childs to so share data betwen the childs 
               
               
 
